[{"C:\\Development\\three\\src\\index.tsx":"1","C:\\Development\\three\\src\\boilerplate\\reportWebVitals.ts":"2","C:\\Development\\three\\src\\App.tsx":"3","C:\\Development\\three\\src\\util\\type.ts":"4","C:\\Development\\three\\src\\controls\\Controls.tsx":"5","C:\\Development\\three\\src\\controls\\context.tsx":"6","C:\\Development\\three\\src\\controls\\ControlsProvider.tsx":"7","C:\\Development\\three\\src\\controls\\index.ts":"8","C:\\Development\\three\\src\\interface\\InterfaceProvider.tsx":"9","C:\\Development\\three\\src\\interface\\context.tsx":"10","C:\\Development\\three\\src\\interface\\index.ts":"11","C:\\Development\\three\\src\\interface\\Interface.tsx":"12","C:\\Development\\three\\src\\theme.ts":"13","C:\\Development\\three\\src\\interface\\Sidebar.tsx":"14","C:\\Development\\three\\src\\util\\index.ts":"15","C:\\Development\\three\\src\\util\\helpers.ts":"16","C:\\Development\\three\\src\\scenes\\Lines\\index.ts":"17","C:\\Development\\three\\src\\scenes\\breathingDots\\index.ts":"18","C:\\Development\\three\\src\\scenes\\breathingDots\\BreathingDotsProvider.tsx":"19","C:\\Development\\three\\src\\scenes\\breathingDots\\BreathingDotsControls.tsx":"20","C:\\Development\\three\\src\\scenes\\breathingDots\\BreathingDots.tsx":"21","C:\\Development\\three\\src\\scenes\\breathingDots\\types.ts":"22","C:\\Development\\three\\src\\scenes\\breathingDots\\context.tsx":"23","C:\\Development\\three\\src\\scenes\\breathingDots\\Effects.tsx":"24","C:\\Development\\three\\src\\scenes\\Lines\\Lines.tsx":"25","C:\\Development\\three\\src\\scenes\\fractals\\kotch\\Kotch.tsx":"26","C:\\Development\\three\\src\\components\\DefaultCamera.tsx":"27","C:\\Development\\three\\src\\scenes\\lines\\index.ts":"28","C:\\Development\\three\\src\\scenes\\lines\\Lines.tsx":"29","C:\\Development\\three\\src\\controls\\CaptureAnimation.tsx":"30","C:\\Development\\three\\src\\controls\\CaptureControls.tsx":"31"},{"size":513,"mtime":1608591737413,"results":"32","hashOfConfig":"33"},{"size":425,"mtime":1608322187450,"results":"34","hashOfConfig":"33"},{"size":1253,"mtime":1608743717495,"results":"35","hashOfConfig":"33"},{"size":340,"mtime":1608498414609,"results":"36","hashOfConfig":"33"},{"size":489,"mtime":1609251003200,"results":"37","hashOfConfig":"33"},{"size":1142,"mtime":1609250338801,"results":"38","hashOfConfig":"33"},{"size":1001,"mtime":1609250686206,"results":"39","hashOfConfig":"33"},{"size":143,"mtime":1608500928673,"results":"40","hashOfConfig":"33"},{"size":391,"mtime":1608649696412,"results":"41","hashOfConfig":"33"},{"size":846,"mtime":1608649687514,"results":"42","hashOfConfig":"33"},{"size":147,"mtime":1608649868825,"results":"43","hashOfConfig":"33"},{"size":2011,"mtime":1608670934668,"results":"44","hashOfConfig":"33"},{"size":905,"mtime":1608654371762,"results":"45","hashOfConfig":"33"},{"size":3340,"mtime":1609251144719,"results":"46","hashOfConfig":"33"},{"size":51,"mtime":1608679891807,"results":"47","hashOfConfig":"33"},{"size":284,"mtime":1608679865341,"results":"48","hashOfConfig":"33"},{"size":44,"mtime":1608743714761,"results":"49","hashOfConfig":"33"},{"size":212,"mtime":1608592252787,"results":"50","hashOfConfig":"33"},{"size":1056,"mtime":1608672346609,"results":"51","hashOfConfig":"33"},{"size":3506,"mtime":1608740924548,"results":"52","hashOfConfig":"33"},{"size":4905,"mtime":1609250706662,"results":"53","hashOfConfig":"33"},{"size":247,"mtime":1608671794818,"results":"54","hashOfConfig":"33"},{"size":1196,"mtime":1608670164534,"results":"55","hashOfConfig":"33"},{"size":3369,"mtime":1608592295251,"results":"56","hashOfConfig":"33"},{"size":2717,"mtime":1608742006012,"results":"57","hashOfConfig":"33"},{"size":3047,"mtime":1609251587167,"results":"58","hashOfConfig":"33"},{"size":857,"mtime":1608907586411,"results":"59","hashOfConfig":"33"},{"size":44,"mtime":1608743714761,"results":"60","hashOfConfig":"33"},{"size":2717,"mtime":1608742006012,"results":"61","hashOfConfig":"33"},{"size":479,"mtime":1609250727854,"results":"62","hashOfConfig":"33"},{"size":303,"mtime":1609251637024,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"15j5uu3",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"66"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Development\\three\\src\\index.tsx",[],["129","130"],"C:\\Development\\three\\src\\boilerplate\\reportWebVitals.ts",[],"C:\\Development\\three\\src\\App.tsx",[],"C:\\Development\\three\\src\\util\\type.ts",[],"C:\\Development\\three\\src\\controls\\Controls.tsx",[],"C:\\Development\\three\\src\\controls\\context.tsx",[],"C:\\Development\\three\\src\\controls\\ControlsProvider.tsx",[],"C:\\Development\\three\\src\\controls\\index.ts",[],"C:\\Development\\three\\src\\interface\\InterfaceProvider.tsx",[],"C:\\Development\\three\\src\\interface\\context.tsx",[],"C:\\Development\\three\\src\\interface\\index.ts",[],"C:\\Development\\three\\src\\interface\\Interface.tsx",[],"C:\\Development\\three\\src\\theme.ts",[],"C:\\Development\\three\\src\\interface\\Sidebar.tsx",[],"C:\\Development\\three\\src\\util\\index.ts",[],"C:\\Development\\three\\src\\util\\helpers.ts",[],"C:\\Development\\three\\src\\scenes\\Lines\\index.ts",[],["131","132"],"C:\\Development\\three\\src\\scenes\\breathingDots\\index.ts",[],"C:\\Development\\three\\src\\scenes\\breathingDots\\BreathingDotsProvider.tsx",[],"C:\\Development\\three\\src\\scenes\\breathingDots\\BreathingDotsControls.tsx",[],"C:\\Development\\three\\src\\scenes\\breathingDots\\BreathingDots.tsx",["133","134","135"],"import { Box, Button } from '@material-ui/core';\nimport React, { FC, useEffect, useMemo, useRef } from 'react';\nimport { Canvas, useFrame, useThree } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport useCapture from 'use-capture';\nimport { useControlsContext } from '../../controls';\nimport { streamEnumMetadata } from '../../util/type';\nimport { useBreathingDotsContext } from './context';\nimport Effects from './Effects';\nimport { Waves } from './types';\n\nexport const waveMetadata: Record<string, string> = { smooth: 'Smooth', bubble: 'Bubble', roundedSquare: 'Ripple' };\n// Smooth motion:\nconst smoothWave = (sinValue: number) => Math.sin(sinValue);\n// Snappy Motion:\nconst roundedSquareWave = (t: number, delta: number, a: number, f: number) => {\n  return ((2 * a) / Math.PI) * Math.atan(smoothWave(2 * Math.PI * t * f) / delta);\n};\n\nconst waveStyleMetadata: Record<string, (dist: number, t: number, f: number) => number> = {\n  smooth: (t: number, f: number) => smoothWave(t * f),\n  bubble: (t: number, f: number) => smoothWave(1.5 * Math.PI * t * f),\n  roundedSquare: (t: number, f: number, dist: number) => roundedSquareWave(t, 0.15 + (0.2 * dist) / 72, 0.4, f)\n};\n\nconst waveMultiplyerValue = (t: number, f: number, type: keyof typeof Waves, dist: number,) => streamEnumMetadata(Waves, waveStyleMetadata).find(({ key }) => key === type)?.value(t, f, dist);\ninterface DotsProps { tValue: number, fValue: number, wave: keyof typeof Waves }\nconst Dots: FC<DotsProps> = ({ tValue, fValue, wave }) => {\n  const ref = useRef<THREE.InstancedMesh>();\n\n  const { vec, transform, positions, distances } = useMemo(() => {\n    const vec = new THREE.Vector3();\n    const transform = new THREE.Matrix4();\n\n    // Precompute randomized initial positions\n    const positions = [...Array(10000)].map((_, i) => {\n      const position = new THREE.Vector3();\n      // Place in a grid\n      position.x = (i % 100) - 50;\n      position.y = Math.floor(i / 100) - 50;\n      // Offset every other column (hexagonal pattern)\n      position.y += (i % 2) * 0.5;\n      // Noise generation\n      position.x += Math.random() * 0.3;\n      position.y += Math.random() * 0.3;\n      // read these articles and use a mathamatical and more natural distribution method: https://www.cs.ubc.ca/~rbridson/docs/bridson-siggraph07-poissondisk.pdf, https://en.wikipedia.org/wiki/Centroidal_Voronoi_tessellation\n      return position;\n    });\n\n    // Precompute initial distances with octagonal offset\n    const right = new THREE.Vector3(1, 0, 0);\n    // change the input to the wave based on the dot’s distance from the center\n    const distances = positions.map((pos) => (\n      //make that wave an octagon instead of a circle\n      pos.length() + Math.cos(pos.angleTo(right) * 8) * 0.5\n    ));\n\n    return { vec, transform, positions, distances };\n  }, []);\n\n  useFrame(({ clock }) => {\n    for (let i = 0; i < 10000; ++i) {\n      const dist = distances[i];\n\n      // Distance affects the wave phase\n      // const t = clock.elapsedTime - dist / 12.5;\n      const t = clock.elapsedTime - dist / tValue;\n      const f = 1 / fValue;\n\n      // Oscillates between -0.4 and +0.4\n      const waveValue = waveMultiplyerValue(t, f, wave, dist);\n      // Scale initial position by our oscillator\n      vec.copy(positions[i]).multiplyScalar(waveValue! + 1.3);\n\n      // Apply the Vector3 to a Matrix4\n      transform.setPosition(vec);\n      // Update Matrix4 for this instance\n      ref.current!.setMatrixAt(i, transform);\n    }\n\n    ref.current!.instanceMatrix.needsUpdate = true;\n  });\n\n  // Read this article about post processing to understand what we've used here:\n  // https://threejsfundamentals.org/threejs/lessons/threejs-post-processing.html\n\n  const goem = new THREE.CircleBufferGeometry(0.15);\n  const mesh = new THREE.MeshBasicMaterial();\n\n  return (\n    <instancedMesh ref={ref} args={[goem, mesh, 10000]} />\n  );\n};\n\ninterface CameraProps { zoom: number }\nconst Camera: FC<CameraProps> = ({ zoom }) => {\n  const camera = useRef();\n  const { setDefaultCamera } = useThree();\n  // This makes sure that size-related calculations are proper\n  // Every call to useThree will return this camera instead of the default camera\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => void setDefaultCamera(camera.current!), []);\n  return (\n    <orthographicCamera zoom={zoom} position={[0, 0, 5]} ref={camera} onUpdate={self => self.updateProjectionMatrix()} />\n  );\n};\n\nconst BreathingDots: FC = () => {\n  const { tSlider, fSlider, wave, zoom } = useBreathingDotsContext();\n  const { captureControls: { bind } } = useControlsContext();\n\n  return (\n    <Canvas\n      colorManagement={false}\n      gl={{\n        preserveDrawingBuffer: true,\n      }}\n      onCreated={bind}\n    >\n      <Camera zoom={zoom} />\n      <color attach=\"background\" args={[0, 0, 0]} />\n      <Dots wave={wave} tValue={tSlider} fValue={fSlider} />\n      <Effects />\n    </Canvas>\n  );\n};\n\nexport default BreathingDots;\n","C:\\Development\\three\\src\\scenes\\breathingDots\\types.ts",[],"C:\\Development\\three\\src\\scenes\\breathingDots\\context.tsx",[],"C:\\Development\\three\\src\\scenes\\breathingDots\\Effects.tsx",[],"C:\\Development\\three\\src\\scenes\\Lines\\Lines.tsx",[],"C:\\Development\\three\\src\\scenes\\fractals\\kotch\\Kotch.tsx",[],"C:\\Development\\three\\src\\components\\DefaultCamera.tsx",[],"C:\\Development\\three\\src\\scenes\\lines\\index.ts",[],"C:\\Development\\three\\src\\scenes\\lines\\Lines.tsx",[],"C:\\Development\\three\\src\\controls\\CaptureAnimation.tsx",[],"C:\\Development\\three\\src\\controls\\CaptureControls.tsx",[],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"136","replacedBy":"140"},{"ruleId":"138","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":1,"column":10,"nodeType":"144","messageId":"145","endLine":1,"endColumn":13},{"ruleId":"142","severity":1,"message":"146","line":1,"column":15,"nodeType":"144","messageId":"145","endLine":1,"endColumn":21},{"ruleId":"142","severity":1,"message":"147","line":5,"column":8,"nodeType":"144","messageId":"145","endLine":5,"endColumn":18},"no-native-reassign",["148"],"no-negated-in-lhs",["149"],["148"],["149"],"@typescript-eslint/no-unused-vars","'Box' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'useCapture' is defined but never used.","no-global-assign","no-unsafe-negation"]